const n=32

(* manipulation générale de registres *)

AND<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]&b[0]).AND<n-1>(a[1..],b[1..])
	end if
end where

EOR<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]^b[0]).EOR<n-1>(a[1..],b[1..])
	end if
end where

ORR<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]+b[0]).EOR<n-1>(a[1..],b[1..])
	end if
end where

BIC<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]&(not b[0])).EOR<n-1>(a[1..],b[1..])
	end if
end where

neg<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(not a[0]).neg<n-1>(a[1..])
	end if
end where

eq<n>(a:[n],b:[n])=(s) where
	if n=0 then
		s=1
	else
		s=(not (a[0]^b[0]))&eq<n-1>(a[1..],b[1..]);
	end if
end where

add(a,b,c)=(s,r) where
	r=((a^b) & c)+(a & b);
	s=a^b^c
end where

ajoute<n>(a:[n],b:[n],r)=(s:[n],nr) where
	if n=0 then
		s=[];
		nr=0
	else
		(s0,ret)=add(a[0],b[0],r);
		(s1,nr)=ajoute<n-1>(a[1..],b[1..],ret);
		s=s0.s1
	end if
end where

rep<n>(a)=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=a.rep<n-1>(a)
	end if
end where

un<n>()=(s:[n]) where
	s=1.rep<n-1>(0)
end where

moins<n>(a:[n])=(s:[n]) where
	(s,r)=ajoute<n>(un<n>(),neg<n>(a),0)
end where

sub<n>(a:[n],b:[n],c)=(s:[n],r) where
	(s,r)=ajoute<n>(a,moins<n>(b),c)
end where

mulaux<n,m>(a:[n],b:[m])=(s:[n+m]) where
	if n=0 then
		s=rep<m>(0)
	else
		(s,r)=ajoute<n+m>(0.mulaux<n-1,m>(a[1..],b),AND<n+m>(rep<n+m>(a[0]),b.rep<n>(0)),0)
	end if
end where

mul<n>(a:[n],b:[n])=(s:[n*2]) where
	s=mulaux<n,n>(a,b);
end where

(* manipulation de chaînes *)

decalG<r,n>(a:[n],b)=(s:[r+n]) where
	if r=0 then
		s=a
	else
		s=b.decalG<r-1,n>(a,b)
	end if
end where

decalD<d,n>(a:[n])=(s:[n-d],r:[d]) where
	if d=0 then
		s=a;
		r=[]
	else
		(s1,r1)=decalD<d-1,n>(a);
		r=s1[0].r;
		s=s1[1..];
	end if
end where

Mux<n>(a,b:[n],c:[n])=(s:[n]) where
	s=ORR<n>(AND<n>(rep<n>(not a),b),AND<n>(rep<n>(a),c))
end where

(* adressage de lecture (L) dans une table de registres *)

Ltable1<n>(a:[1],r0:[n],r1:[n])=(s:[n]) where
	s=Mux<n>(a[0],r0,r1);
end where
	
Ltable2<n>(a:[2],r0:[n],r1:[n],r2:[n],r3:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable1<n>(a[1..],r0,r2),Ltable1<n>(a[1..],r1,r3))
end where

Ltable3<n>(a:[3],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable2<n>(a[1..],r0,r2,r4,r6),Ltable2<n>(a[1..],r1,r3,r5,r7))
end where

Ltable4<n>(a:[4],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable3<n>(a[1..],r0,r2,r4,r6,r8,r10,r12,r14),Ltable3<n>(a[1..],r1,r3,r5,r7,r9,r11,r13,r15))
end where

(* adressage d'écriture (E) dans une table de registres *)

Etable1<n>(a:[1],e:[n],r0:[n],r1:[n])=(sr0:[n],sr1:[n]) where
	sr0=Mux<n>(a[0],e,r0);
	sr1=Mux<n>(a[0],r1,e);
end where
	
Etable2<n>(a:[2],e:[n],r0:[n],r1:[n],r2:[n],r3:[n])=(sr0:[n],sr1:[n],sr2:[n],sr3:[n]) where
	(ar0,ar2)=Etable1<n>(a[1..],e,r0,r2);
	(ar1,ar3)=Etable1<n>(a[1..],e,r1,r3);
	sr0=Mux<n>(a[0],ar0,r0);
	sr2=Mux<n>(a[0],ar2,r2);
	sr1=Mux<n>(a[0],r1,ar1);
	sr3=Mux<n>(a[0],r3,ar3);
end where
	
Etable3<n>(a:[3],e:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n])=(sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n]) where
	(ar0,ar2,ar4,ar6)=Etable2<n>(a[1..],e,r0,r2,r4,r6);
	(ar1,ar3,ar5,ar7)=Etable2<n>(a[1..],e,r1,r3,r5,r7);
	sr0=Mux<n>(a[0],ar0,r0);
	sr2=Mux<n>(a[0],ar2,r2);
	sr4=Mux<n>(a[0],ar4,r4);
	sr6=Mux<n>(a[0],ar6,r6);
	sr1=Mux<n>(a[0],r1,ar1);
	sr3=Mux<n>(a[0],r3,ar3);
	sr5=Mux<n>(a[0],r5,ar5);
	sr7=Mux<n>(a[0],r7,ar7);
end where
	
Etable4<n>(a:[4],e:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=
(sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n],sr8:[n],sr9:[n],sr10:[n],sr11:[n],sr12:[n],sr13:[n],sr14:[n],sr15:[n]) where
	(ar0,ar2,ar4,ar6,ar8,ar10,ar12,ar14)=Etable3<n>(a[1..],e,r0,r2,r4,r6,r8,r10,r12,r14);
	(ar1,ar3,ar5,ar7,ar9,ar11,ar13,ar15)=Etable3<n>(a[1..],e,r1,r3,r5,r7,r9,r11,r13,r15);
	sr0=Mux<n>(a[0],ar0,r0);
	sr2=Mux<n>(a[0],ar2,r2);
	sr4=Mux<n>(a[0],ar4,r4);
	sr6=Mux<n>(a[0],ar6,r6);
	sr8=Mux<n>(a[0],ar8,r8);
	sr10=Mux<n>(a[0],ar10,r10);
	sr12=Mux<n>(a[0],ar12,r12);
	sr14=Mux<n>(a[0],ar14,r14);
	sr1=Mux<n>(a[0],r1,ar1);
	sr3=Mux<n>(a[0],r3,ar3);
	sr5=Mux<n>(a[0],r5,ar5);
	sr7=Mux<n>(a[0],r7,ar7);
	sr9=Mux<n>(a[0],r9,ar9);
	sr11=Mux<n>(a[0],r11,ar11);
	sr13=Mux<n>(a[0],r13,ar13);
	sr15=Mux<n>(a[0],r15,ar15);
end where
	
registre<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=reg(a[0]).registre<n-1>(a[1..])
	end if
end where

cond(op:[4],nzcv:[4])=(r) where
	n=nzcv[0];
	z=nzcv[1];
	c=nzcv[2];
	v=nzcv[3];
	r=Ltable4<1>(op,z,not z,c,not c,n,not n,v,not v,c & (not z),(not c)+z,not n^v,n^v,(not z) & (not (n^v)),z+(n^v),1,0);
end where

lsl(a:[5],r:[n],c)=(s:[n],nc) where
	r0=Mux<n+1>(a[0],r.0,decalG<1,n>(r[..(n-1)],0));
	r1=Mux<n+1>(a[1],r0,decalG<2,n-1>(r0[..(n-2)],0));
	r2=Mux<n+1>(a[2],r1,decalG<4,n-3>(r1[..(n-4)],0));
	r3=Mux<n+1>(a[3],r2,decalG<8,n-7>(r2[..(n-8)],0));
	r4=Mux<n+1>(a[4],r3,decalG<16,n-15>(r3[..(n-16)],0));
	nc=mux(a[0]+a[1]+a[2]+a[3]+a[4],c,r4[n]);
	s=r4[0..(n-1)];
end where

lslR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=lsl(a[0..4],r,c);
	grand=a[5]+a[6]+a[7];
	s=Mux<n>(grand,r0,rep<n>(0));
	nc=mux(grand,nc,mux(eq<8>(0.0.0.0.0.1.0.0,a[0..7]),0,r[0]));
end where

lsr(a:[5],r:[n])=(s:[n],c) where
	r0=Mux<n+1>(a[0],0.r,r[0..].0);
	r1=Mux<n+1>(a[1],r0,r0[2..].0.0);
	r2=Mux<n+1>(a[2],r1,r1[4..].0.0.0.0);
	r3=Mux<n+1>(a[3],r2,r2[8..].0.0.0.0.0.0.0.0);
	r4=Mux<n+1>(a[4],r3,r3[16..].0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0);
	z=a[0]+a[1]+a[2]+a[3]+a[4];
	s=Mux<n>(z,rep<n>(0),r4[1..]);
	c=mux(z,r[n-1],r4[0]);
end where

lsrR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=lsr(a[0..4],r);
	grand=a[5]+a[6]+a[7];
	z=eq<8>(rep<8>(0),a[0..7]);
	s=Mux<n>(grand,Mux<n>(z,r0,r),rep<n>(0));
	nc=mux(grand,mux(z,nc,c),mux(eq<8>(0.0.0.0.0.1.0.0,a[0..7]),0,r[n-1]));
end where

asr(a:[5],r:[n])=(s:[n],c) where
	b=r[n-1];
	rb=Mux<n+1>(a[0],0.r,r[0..].b);
	r1=Mux<n+1>(a[1],rb,rb[2..].b.b);
	r2=Mux<n+1>(a[2],r1,r1[4..].b.b.b.b);
	r3=Mux<n+1>(a[3],r2,r2[8..].b.b.b.b.b.b.b.b);
	r4=Mux<n+1>(a[4],r3,r3[16..].b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b);
	z=a[0]+a[1]+a[2]+a[3]+a[4];
	s=Mux<n>(z,rep<n>(b),r4[1..]);
	c=mux(z,r[n-1],r4[0]);
end where

asrR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=asr(a[0..4],r);
	grand=a[5]+a[6]+a[7];
	z=eq<8>(rep<8>(0),a[0..7]);
	s=Mux<n>(grand,Mux<n>(z,r0,r),rep<n>(r[n-1]));
	nc=mux(grand,mux(z,nc,c),r[n-1]);
end where

ror(a:[5],r:[n],c)=(s:[n],nc) where
	b=r[n-1];
	rb=Mux<n>(a[0],r,r[1..].r[0]);
	r1=Mux<n>(a[1],rb,rb[2..].rb[0..1]);
	r2=Mux<n>(a[2],r1,r1[4..].r1[0..3]);
	r3=Mux<n>(a[3],r2,r2[8..].r2[0..7]);
	r4=Mux<n>(a[4],r3,r3[16..].r3[0..15]);
	rrx=a[0]+a[1]+a[2]+a[3]+a[4];
	s=Mux<n>(rrx,r[1..].c,r4);
	nc=mux(rrx,r[0],r4[0]);
end where

rorR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=ror(a[0..4],r,c);
	z=eq<8>(rep<8>(0),a[0..7]);
	z2=eq<4>(rep<4>(0),a[0..3]);
	s=Mux<n>(z2,r0,r);
	nc=mux(z,mux(z2,nc,r[n-1]),c);
end where

lecture(op:[n],c,r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=(r:[n],nc) where
	Rm=Ltable4<n>(op[0..3],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rd=Ltable4<n>(op[8..11],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	imm=op[25];
	decal=op[4..6];
	val=op[7..11];
	(LSL,LSLc)=lsl(val,Rm,c);
	(LSR,LSRc)=lsr(val,Rm);
	(ASR,ASRc)=asr(val,Rm);
	(ROR,RORc)=ror(val,Rm,c);
	(LSLR,LSLRc)=lslR(Rd,Rm,c);
	(LSRR,LSRRc)=lsrR(Rd,Rm,c);
	(ASRR,ASRRc)=asrR(Rd,Rm,c);
	(RORR,RORRc)=rorR(Rd,Rm,c);
	(IMM,IMMc)=lsl(0.val[8..11],val[0..7].rep<24>(0),c);
	rnc=Mux<n+1>(imm,Ltable3<n+1>(decal,LSL.LSLc,LSLR.LSLRc,LSR.LSRc,LSRR.LSRRc,ASR.ASRc,ASRR.ASRRc,ROR.RORc,RORR.RORRc),IMM.IMMc);
	r=rnc[0..(n-1)];
	nc=rnc[n];
end where

main()=(e0:[n],e1:[n]) where
	a=0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	b=1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	c=0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	d=1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0;
(*	(e0,e1)=Etable1<n>(1,d,a,b); *)
	e1=a;
	(e0,c)=asr(1.0.0.0.0,d);
end where
