const n=32

(* manipulation générale de registres *)

AND<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]&b[0]).AND<n-1>(a[1..],b[1..])
	end if
end where

EOR<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]^b[0]).EOR<n-1>(a[1..],b[1..])
	end if
end where

ORR<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]+b[0]).EOR<n-1>(a[1..],b[1..])
	end if
end where

BIC<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]&(not b[0])).EOR<n-1>(a[1..],b[1..])
	end if
end where

neg<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(not a[0]).neg<n-1>(a[1..])
	end if
end where

add(a,b,c)=(s,r) where
	r=((a^b) & c)+(a & b);
	s=a^b^c
end where

ajoute<n>(a:[n],b:[n],r)=(s:[n],nr) where
	if n=0 then
		s=[];
		nr=0
	else
		(s0,ret)=add(a[0],b[0],r);
		(s1,nr)=ajoute<n-1>(a[1..],b[1..],ret);
		s=s0.s1
	end if
end where

rep<n>(a)=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=a.rep<n-1>(a)
	end if
end where

un<n>()=(s:[n]) where
	s=1.rep<n-1>(0)
end where

moins<n>(a:[n])=(s:[n]) where
	(s,r)=ajoute<n>(un<n>(),neg<n>(a),0)
end where

sub<n>(a:[n],b:[n],c)=(s:[n],r) where
	(s,r)=ajoute<n>(a,moins<n>(b),c)
end where

mulaux<n,m>(a:[n],b:[m])=(s:[n+m]) where
	if n=0 then
		s=rep<m>(0)
	else
		(s,r)=ajoute<n+m>(0.mulaux<n-1,m>(a[1..],b),AND<n+m>(rep<n+m>(a[0]),b.rep<n>(0)),0)
	end if
end where

mul<n>(a:[n],b:[n])=(s:[n*2]) where
	s=mulaux<n,n>(a,b);
end where

decalG<r,n>(a:[n],b)=(s:[r+n]) where
	if r=0 then
		s=a
	else
		s=b.decalG<r-1,n>(a,b)
	end if
end where

decalD<d,n>(a:[n])=(s:[n-d],r:[d]) where
	if d=0 then
		s=a;
		r=[]
	else
		(s1,r1)=decalD<d-1,n>(a);
		r=s1[0].r;
		s=s1[1..];
	end if
end where

Mux<n>(a,b:[n],c:[n])=(s:[n]) where
	s=ORR<n>(AND<n>(rep<n>(not a),b),AND<n>(rep<n>(a),c))
end where

(* adressage de lecture (L) dans une table de registres *)

Ltable1<n>(a:[1],r0:[n],r1:[n])=(s:[n]) where
	s=Mux<n>(a[0],r0,r1);
end where
	
Ltable2<n>(a:[2],r0:[n],r1:[n],r2:[n],r3:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable1<n>(a[1..],r0,r2),Ltable1<n>(a[1..],r1,r3))
end where

Ltable3<n>(a:[3],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable2<n>(a[1..],r0,r2,r4,r6),Ltable2<n>(a[1..],r1,r3,r5,r7))
end where

Ltable4<n>(a:[3],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable3<n>(a[1..],r0,r2,r4,r6,r8,r10,r12,r14),Ltable3<n>(a[1..],r1,r3,r5,r7,r9,r11,r13,r15))
end where

(* adressage d'écriture (E) dans une table de registres *)

Etable1<n>(a:[1],e:[n],r0:[n],r1:[n])=(sr0:[n],sr1:[n]) where
	sr0=Mux<n>(a[0],e,r0);
	sr1=Mux<n>(a[0],r1,e);
end where
	
Etable2<n>(a:[2],e:[n],r0:[n],r1:[n],r2:[n],r3:[n])=(sr0:[n],sr1:[n],sr2:[n],sr3:[n]) where
	(ar0,ar2)=Etable1<n>(a[1..],e,r0,r2);
	(ar1,ar3)=Etable1<n>(a[1..],e,r1,r3);
	sr0=Mux<n>(a[0],ar0,r0);
	sr2=Mux<n>(a[0],ar2,r2);
	sr1=Mux<n>(a[0],r1,ar1);
	sr3=Mux<n>(a[0],r3,ar3);
end where
	
Etable3<n>(a:[3],e:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n])=(sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n]) where
	(ar0,ar2,ar4,ar6)=Etable2<n>(a[1..],e,r0,r2,r4,r6);
	(ar1,ar3,ar5,ar7)=Etable2<n>(a[1..],e,r1,r3,r5,r7);
	sr0=Mux<n>(a[0],ar0,r0);
	sr2=Mux<n>(a[0],ar2,r2);
	sr4=Mux<n>(a[0],ar4,r4);
	sr6=Mux<n>(a[0],ar6,r6);
	sr1=Mux<n>(a[0],r1,ar1);
	sr3=Mux<n>(a[0],r3,ar3);
	sr5=Mux<n>(a[0],r5,ar5);
	sr7=Mux<n>(a[0],r7,ar7);
end where
	
Etable4<n>(a:[4],e:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=
(sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n],sr8:[n],sr9:[n],sr10:[n],sr11:[n],sr12:[n],sr13:[n],sr14:[n],sr15:[n]) where
	(ar0,ar2,ar4,ar6,ar8,ar10,ar12,ar14)=Etable3<n>(a[1..],e,r0,r2,r4,r6,r8,r10,r12,r14);
	(ar1,ar3,ar5,ar7,ar9,ar11,ar13,ar15)=Etable3<n>(a[1..],e,r1,r3,r5,r7,r9,r11,r13,r15);
	sr0=Mux<n>(a[0],ar0,r0);
	sr2=Mux<n>(a[0],ar2,r2);
	sr4=Mux<n>(a[0],ar4,r4);
	sr6=Mux<n>(a[0],ar6,r6);
	sr8=Mux<n>(a[0],ar8,r8);
	sr10=Mux<n>(a[0],ar10,r10);
	sr12=Mux<n>(a[0],ar12,r12);
	sr14=Mux<n>(a[0],ar14,r14);
	sr1=Mux<n>(a[0],r1,ar1);
	sr3=Mux<n>(a[0],r3,ar3);
	sr5=Mux<n>(a[0],r5,ar5);
	sr7=Mux<n>(a[0],r7,ar7);
	sr9=Mux<n>(a[0],r9,ar9);
	sr11=Mux<n>(a[0],r11,ar11);
	sr13=Mux<n>(a[0],r13,ar13);
	sr15=Mux<n>(a[0],r15,ar15);
end where
	
registre<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=reg(a[0]).registre<n-1>(a[1..])
	end if
end where

main()=(e0:[n],e1:[n]) where
	a=0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	b=1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	c=0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	d=1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	(e0,e1)=Etable1<n>(1,d,a,b);
end where
