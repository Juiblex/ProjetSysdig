const n=32

(* manipulation générale de registres *)

AND<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]&b[0]).AND<n-1>(a[1..],b[1..])
	end if
end where

EOR<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]^b[0]).EOR<n-1>(a[1..],b[1..])
	end if
end where

ORR<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]+b[0]).EOR<n-1>(a[1..],b[1..])
	end if
end where

BIC<n>(a:[n],b:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(a[0]&(not b[0])).EOR<n-1>(a[1..],b[1..])
	end if
end where

neg<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=(not a[0]).neg<n-1>(a[1..])
	end if
end where

eq<n>(a:[n],b:[n])=(s) where
	if n=0 then
		s=1
	else
		s=(not (a[0]^b[0]))&eq<n-1>(a[1..],b[1..]);
	end if
end where

add(a,b,c)=(s,r) where
	r=((a^b) & c)+(a & b);
	s=a^b^c
end where

ajoute<n>(a:[n],b:[n],r)=(s:[n],nr) where
	if n=0 then
		s=[];
		nr=r;
	else
		(s0,ret)=add(a[0],b[0],r);
		(s1,nr)=ajoute<n-1>(a[1..],b[1..],ret);
		s=s0.s1
	end if
end where

rep<n>(a)=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=a.rep<n-1>(a)
	end if
end where

un<n>()=(s:[n]) where
	s=1.rep<n-1>(0)
end where

moins<n>(a:[n])=(s:[n]) where
	(s,r)=ajoute<n>(un<n>(),neg<n>(a),0)
end where

sub<n>(a:[n],b:[n],c)=(s:[n],r) where
	(s,r)=ajoute<n>(a,moins<n>(b),c)
end where

mulaux<n,m>(a:[n],b:[m])=(s:[n+m]) where
	if n=0 then
		s=rep<n+m>(0)
	else
		(s,r)=ajoute<n+m>(0.mulaux<n-1,m>(a[1..],b),AND<n+m>(rep<n+m>(a[0]),b.rep<n>(0)),0)
	end if
end where

mul<n>(a:[n],b:[n])=(s:[n*2]) where
	s=mulaux<n,n>(a,b);
end where

(* manipulation de chaînes *)

decalG<r,n>(a:[n],b)=(s:[r+n]) where
	if r=0 then
		s=a
	else
		s=b.decalG<r-1,n>(a,b)
	end if
end where

decalD<d,n>(a:[n])=(s:[n-d],r:[d]) where
	if d=0 then
		s=a;
		r=[]
	else
		(s1,r1)=decalD<d-1,n>(a);
		r=s1[0].r;
		s=s1[1..];
	end if
end where

Mux<n>(a,b:[n],c:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=mux(a,b[0],c[0]).Mux<n-1>(a,b[1..],c[1..]);
	end if
end where

(* adressage de lecture (L) dans une table de registres *)

Ltable1<n>(a:[1],r0:[n],r1:[n])=(s:[n]) where
	s=Mux<n>(a[0],r0,r1);
end where
	
Ltable2<n>(a:[2],r0:[n],r1:[n],r2:[n],r3:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable1<n>(a[1..],r0,r2),Ltable1<n>(a[1..],r1,r3))
end where

Ltable3<n>(a:[3],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable2<n>(a[1..],r0,r2,r4,r6),Ltable2<n>(a[1..],r1,r3,r5,r7))
end where

Ltable4<n>(a:[4],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=(s:[n]) where
	s=Mux<n>(a[0],Ltable3<n>(a[1..],r0,r2,r4,r6,r8,r10,r12,r14),Ltable3<n>(a[1..],r1,r3,r5,r7,r9,r11,r13,r15))
end where

(* adressage d'écriture (E) dans une table de registres *)

Etable4<n>(a:[4],e:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=
(sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n],sr8:[n],sr9:[n],sr10:[n],sr11:[n],sr12:[n],sr13:[n],sr14:[n],sr15:[n]) where
	sr0=Mux<n>(eq<4>(0.0.0.0,a),r0,e);
	sr1=Mux<n>(eq<4>(1.0.0.0,a),r1,e);
	sr2=Mux<n>(eq<4>(0.1.0.0,a),r2,e);
	sr3=Mux<n>(eq<4>(1.1.0.0,a),r3,e);
	sr4=Mux<n>(eq<4>(0.0.1.0,a),r4,e);
	sr5=Mux<n>(eq<4>(1.0.1.0,a),r5,e);
	sr6=Mux<n>(eq<4>(0.1.1.0,a),r6,e);
	sr7=Mux<n>(eq<4>(1.1.1.0,a),r7,e);
	sr8=Mux<n>(eq<4>(0.0.0.1,a),r8,e);
	sr9=Mux<n>(eq<4>(1.0.0.1,a),r9,e);
	sr10=Mux<n>(eq<4>(0.1.0.1,a),r10,e);
	sr11=Mux<n>(eq<4>(1.1.0.1,a),r11,e);
	sr12=Mux<n>(eq<4>(0.0.1.1,a),r12,e);
	sr13=Mux<n>(eq<4>(1.0.1.1,a),r13,e);
	sr14=Mux<n>(eq<4>(0.1.1.1,a),r14,e);
	sr15=Mux<n>(eq<4>(1.1.1.1,a),r15,e);
end where

registre<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=reg(a[0]).registre<n-1>(a[1..])
	end if
end where

cond(op:[4],nzcv:[4])=(r) where
	n=nzcv[0];
	z=nzcv[1];
	c=nzcv[2];
	v=nzcv[3];
	r=Ltable4<1>(op,z,not z,c,not c,n,not n,v,not v,c & (not z),(not c)+z,not n^v,n^v,(not z) & (not (n^v)),z+(n^v),1,0);
end where

lsl(a:[5],r:[n],c)=(s:[n],nc) where
	r0=Mux<n+1>(a[0],r.0,decalG<1,n>(r[..(n-1)],0));
	r1=Mux<n+1>(a[1],r0,decalG<2,n-1>(r0[..(n-2)],0));
	r2=Mux<n+1>(a[2],r1,decalG<4,n-3>(r1[..(n-4)],0));
	r3=Mux<n+1>(a[3],r2,decalG<8,n-7>(r2[..(n-8)],0));
	r4=Mux<n+1>(a[4],r3,decalG<16,n-15>(r3[..(n-16)],0));
	nc=mux(a[0]+a[1]+a[2]+a[3]+a[4],c,r4[n]);
	s=r4[0..(n-1)];
end where

lslR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=lsl(a[0..4],r,c);
	grand=a[5]+a[6]+a[7];
	s=Mux<n>(grand,r0,rep<n>(0));
	eq32=eq<8>(0.0.0.0.0.1.0.0,a[0..7]);
	nc=mux(grand,c0,mux(eq32,0,r[0])); 
end where

lsr(a:[5],r:[n])=(s:[n],c) where
	r0=Mux<n+1>(a[0],0.r,r[0..].0);
	r1=Mux<n+1>(a[1],r0,r0[2..].0.0);
	r2=Mux<n+1>(a[2],r1,r1[4..].0.0.0.0);
	r3=Mux<n+1>(a[3],r2,r2[8..].0.0.0.0.0.0.0.0);
	r4=Mux<n+1>(a[4],r3,r3[16..].0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0);
	z=a[0]+a[1]+a[2]+a[3]+a[4];
	s=Mux<n>(z,rep<n>(0),r4[1..]);
	c=mux(z,r[n-1],r4[0]);
end where

lsrR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=lsr(a[0..4],r);
	grand=a[5]+a[6]+a[7];
	z=eq<8>(rep<8>(0),a[0..7]);
	s=Mux<n>(grand,Mux<n>(z,r0,r),rep<n>(0));
	nc=mux(grand,mux(z,c0,c),mux(eq<8>(0.0.0.0.0.1.0.0,a[0..7]),0,r[n-1]));
end where

asr(a:[5],r:[n])=(s:[n],c) where
	b=r[n-1];
	rb=Mux<n+1>(a[0],0.r,r[0..].b);
	r1=Mux<n+1>(a[1],rb,rb[2..].b.b);
	r2=Mux<n+1>(a[2],r1,r1[4..].b.b.b.b);
	r3=Mux<n+1>(a[3],r2,r2[8..].b.b.b.b.b.b.b.b);
	r4=Mux<n+1>(a[4],r3,r3[16..].b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b);
	z=a[0]+a[1]+a[2]+a[3]+a[4];
	s=Mux<n>(z,rep<n>(b),r4[1..]);
	c=mux(z,r[n-1],r4[0]);
end where

asrR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=asr(a[0..4],r);
	grand=a[5]+a[6]+a[7];
	z=eq<8>(rep<8>(0),a[0..7]);
	s=Mux<n>(grand,Mux<n>(z,r0,r),rep<n>(r[n-1]));
	nc=mux(grand,mux(z,c0,c),r[n-1]);
end where

ror(a:[5],r:[n],c)=(s:[n],nc) where
	b=r[n-1];
	rb=Mux<n>(a[0],r,r[1..].r[0]);
	r1=Mux<n>(a[1],rb,rb[2..].rb[0..1]);
	r2=Mux<n>(a[2],r1,r1[4..].r1[0..3]);
	r3=Mux<n>(a[3],r2,r2[8..].r2[0..7]);
	r4=Mux<n>(a[4],r3,r3[16..].r3[0..15]);
	rrx=a[0]+a[1]+a[2]+a[3]+a[4];
	s=Mux<n>(rrx,r[1..].c,r4);
	nc=mux(rrx,r[0],r4[0]);
end where

rorR(a:[n],r:[n],c)=(s:[n],nc) where
	(r0,c0)=ror(a[0..4],r,c);
	z=eq<8>(rep<8>(0),a[0..7]);
	z2=eq<4>(rep<4>(0),a[0..3]);
	s=Mux<n>(z2,r0,r);
	nc=mux(z,mux(z2,c0,r[n-1]),c);
end where

lecture(op:[n],c,r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=(r:[n],nc) where
	Rm=Ltable4<n>(op[0..3],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rd=Ltable4<n>(op[8..11],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	imm=op[25];
	decal=op[4..6];
	val=op[7..11];
	(LSL,LSLc)=lsl(val,Rm,c);
	(LSR,LSRc)=lsr(val,Rm);
	(ASR,ASRc)=asr(val,Rm);
	(ROR,RORc)=ror(val,Rm,c);
	(LSLR,LSLRc)=lslR(Rd,Rm,c);
	(LSRR,LSRRc)=lsrR(Rd,Rm,c);
	(ASRR,ASRRc)=asrR(Rd,Rm,c);
	(RORR,RORRc)=rorR(Rd,Rm,c);
	(IMM,IMMctruc)=lsl(0.op[8..11],op[0..7].rep<24>(0),c);
	IMMc=mux(eq<4>(op[8..11],rep<4>(0)),IMM[n-1],c);
	rnc=Mux<n+1>(imm,Ltable3<n+1>(decal,LSL.LSLc,LSLR.LSLRc,LSR.LSRc,LSRR.LSRRc,ASR.ASRc,ASRR.ASRRc,ROR.RORc,RORR.RORRc),IMM.IMMc);
	r=rnc[0..(n-1)];
	nc=rnc[n];
end where

overflow(a:[n],b:[n],c:[n])=(v) where
	v=(not a[n-1]^b[n-1]) and (a[n-1]^c[n-1]);
end where

retourne<n>(a:[n])=(s:[n]) where
	if n=0 then
		s=[]
	else
		s=retourne<n-1>(a[1..]).a[0];
	end if
end where

alu(op:[n],cpsr:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=
(deb:[n],ncpsr:[n],sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n],sr8:[n],sr9:[n],sr10:[n],sr11:[n],sr12:[n],sr13:[n],sr14:[n],sr15:[n]) where
	v=cpsr[28];
	c=cpsr[29];
	(Rs,Rsc)=lecture(op,c,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rn=Ltable4<n>(op[16..19],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rd=Ltable4<n>(op[12..15],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	ANDv=AND<n>(Rs,Rn).Rsc.v;
	EORv=EOR<n>(Rs,Rn).Rsc.v;
	moinsRs=moins<n>(Rs);
	moinsRn=moins<n>(Rn);
	negRs=neg<n>(Rs);
	negRn=neg<n>(Rn);
	(sub,subc)=ajoute<n>(Rn,moinsRs,0);
	SUB=sub.subc.overflow(Rn,moinsRs,sub);
	(rsb,rsbc)=ajoute<n>(Rs,moinsRn,0);
	RSB=rsb.rsbc.overflow(Rs,moinsRn,rsb);
	(add,addc)=ajoute<n>(Rs,Rn,0);
	ADD=add.addc.overflow(Rs,Rn,add);
	(adc,adcc)=ajoute<n>(Rs,Rn,c);
	ADC=adc.adcc.overflow(Rs,Rn,adc);
	(sbc,sbcc)=ajoute<n>(Rn,negRs,c);
	SBC=sbc.sbcc.overflow(Rn,negRs,sbc);
	(rsc,rscc)=ajoute<n>(negRn,Rs,c);
	RSC=rsc.rscc.overflow(negRn,Rs,rsc);
	TST=ANDv;
	TEQ=EORv;
	CMP=SUB;
	CMN=ANDv;
	ORRv=ORR<n>(Rs,Rn).Rsc.v;
	MOV=Rs.Rsc.v;
	BICv=BIC<n>(Rs,Rn).Rsc.v;
	MVN=negRs.Rsc.v;
	res=Ltable4<n+2>(op[21..24],ANDv,EORv,SUB,RSB,ADD,ADC,SBC,RSC,TST,TEQ,CMP,CMN,ORRv,MOV,BICv,MVN);
	deb=op[21..24].rep<28>(0);
	exec=cond(op[28..31],cpsr[28..31]) & (not op[26]) & (not op[27]) & (not ((not op[25]) & op[4] & op[7]));
	R=Mux<n>((op[23]+(not op[24]))&exec,Rd,res[0..(n-1)]);
	(sr0,sr1,sr2,sr3,sr4,sr5,sr6,sr7,sr8,sr9,sr10,sr11,sr12,sr13,sr14,sr15)=Etable4<n>(op[12..15],R,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	ncpsr=cpsr[0..27].Mux<4>(op[20]&exec,cpsr[28..31],res[n+1].res[n].eq<n>(R,rep<n>(0)).R[n-1]);
end where

branche(op:[n],cpsr:[n],r14:[n],r15:[n])=(sr14:[n],sr15:[n]) where
	exec=cond(op[28..31],cpsr[28..31]) & (op[25]) & (not op[26]) & (op[27]);
	(pc,c)=ajoute<n>(r15,0.0.op[0..23].rep<6>(op[23]),0);
	(pc2,c2)=ajoute<n>(r15,0.0.1.rep<29>(0),0);
	sr15=Mux<n>(exec,r15,pc);
	sr14=Mux<n>(exec&op[24],r14,pc2);
end where

multiplication(op:[n],cpsr:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=
(ncpsr:[n],sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n],sr8:[n],sr9:[n],sr10:[n],sr11:[n],sr12:[n],sr13:[n],sr14:[n],sr15:[n]) where
	exec=cond(op[28..31],cpsr[28..31]) & eq<10>(op[22..27].op[4..7],rep<6>(0).1.0.0.1);
	Rd=Ltable4<n>(op[16..19],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rn=Ltable4<n>(op[12..15],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rs=Ltable4<n>(op[8..11],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rm=Ltable4<n>(op[0..3],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	p=mul<n>(Rm,Rs);
	prod=p[0..(n-1)];
	(prodadd,c)=ajoute<n>(prod,Rn,0);
	R=Mux<n>(exec,Rd,Mux<n>(op[21],prod,prodadd));
	ncpsr=cpsr[0..29].Mux<2>(exec & op[20],cpsr[30..31],eq<n>(R,rep<n>(0)).R[n-1]);
	(sr0,sr1,sr2,sr3,sr4,sr5,sr6,sr7,sr8,sr9,sr10,sr11,sr12,sr13,sr14,sr15)=Etable4<n>(op[16..19],R,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
end where

memoire(op:[n],cpsr:[n],r0:[n],r1:[n],r2:[n],r3:[n],r4:[n],r5:[n],r6:[n],r7:[n],r8:[n],r9:[n],r10:[n],r11:[n],r12:[n],r13:[n],r14:[n],r15:[n])=
(sr0:[n],sr1:[n],sr2:[n],sr3:[n],sr4:[n],sr5:[n],sr6:[n],sr7:[n],sr8:[n],sr9:[n],sr10:[n],sr11:[n],sr12:[n],sr13:[n],sr14:[n],sr15:[n]) where
	exec=cond(op[28..31],cpsr[28..31]) & eq<3>(op[25..27],0.0.0) & op[4] & op[7];
	(lec,lecc)=lecture(op,cpsr[29],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rs=Mux<n>(op[22],op[0..3].op[8..11].rep<n-8>(0),lec);
	RsSigne=Mux<n>(op[23],moins<n>(Rs),Rs);
	Rn=Ltable4<n>(op[16..19],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	Rd=Ltable4<n>(op[12..15],r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	(modif,modifc)=ajoute<n>(Rn,RsSigne,0);
	addr=Mux<n>(op[24],Rn,modif);
	lect=ram<n/2,n>(addr[0..(n/2)-1],op[5] & exec,addr[0..(n/2)-1],Rd);
	val=Mux<n>((not op[5]) & exec,Rd,lect);
	(sr0t,sr1t,sr2t,sr3t,sr4t,sr5t,sr6t,sr7t,sr8t,sr9t,sr10t,sr11t,sr12t,sr13t,sr14t,sr15t)=Etable4<n>(op[12..15],val,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	nouvRn=Mux<n>((op[21]+op[24]) & exec,Rn,modif);
	(sr0,sr1,sr2,sr3,sr4,sr5,sr6,sr7,sr8,sr9,sr10,sr11,sr12,sr13,sr14,sr15)=Etable4<n>(op[16..19],nouvRn,sr0t,sr1t,sr2t,sr3t,sr4t,sr5t,sr6t,sr7t,sr8t,sr9t,sr10t,sr11t,sr12t,sr13t,sr14t,sr15t);
end where

debug()=(e0:[n],e1:[n]) where
	a=0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	b=1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	c=0.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0;
	d=1.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0;
(*	(e0,e1)=Etable1<n>(1,d,a,b); *)
	e1=a;
	(e0,c)=lslR(a,b,0);
end where

<<<<<<< HEAD
main()=(r10c:[n](*, r0c:[n],r1c:[n],r2c:[n],r3c:[n],r4c:[n],r5c:[n],r6c:[n],r7c:[n],r8c:[n],r9c:[n],r10c:[n],r11c:[n],r12c:[n],r13c:[n],r14d:[n],r15e:[n],pc:[n],cpsrb:[n],op:[n],exec,deb:[n]*)) where
=======
main()=(r10c:[n],r0c:[n],r1c:[n],r2c:[n],r3c:[n],r4c:[n],r5c:[n],r6c:[n],r7c:[n],r8c:[n],r9c:[n],r10c:[n],r11c:[n],r12c:[n],r13c:[n],r14d:[n],r15e:[n],pc:[n],cpsrb:[n],op:[n],exec,deb:[n] ) where
>>>>>>> 3f1c46ab5fb1255f14ed9b8bbf5ba4669de5d08c
	r0=registre<n>(r0c);
	r1=registre<n>(r1c);
	r2=registre<n>(r2c);
	r3=registre<n>(r3c);
	r4=registre<n>(r4c);
	r5=registre<n>(r5c);
	r6=registre<n>(r6c);
	r7=registre<n>(r7c);
	r8=registre<n>(r8c);
	r9=registre<n>(r9c);
	r10=registre<n>(r10c);
	r11=registre<n>(r11c);
	r12=registre<n>(r12c);
	r13=registre<n>(r13c);
	r14=registre<n>(r14d);
	(pce,pcec)=ajoute<n>(r15e,moins<n>(0.0.0.1.rep<28>(0)),0);
	pc=registre<n>(pce);
	(r15,r15retenue)=ajoute<n>(pc,0.0.0.1.rep<28>(0),0);
	(suiv,suivc)=ajoute<n>(r15,0.0.1.rep<29>(0),0);
	cpsr=registre<n>(cpsrb);


	op=retourne<n>(rom<n/2,n>(pc[0..(n/2)-1]));
(*	r8bis=rep<32>(1);
	op=1.rep<7>(0).rep<4>(0).0.0.0.1.0.0.0.1.1.0.0.1.0.1.0.0.0.1.1.1;
	(tmp,e)=ajoute<n>(r8bis,rep<8>(1).rep<24>(0),0);*)
	exec=cond(op[28..31],cpsr[28..31]);
	(deb,cpsra,r0a,r1a,r2a,r3a,r4a,r5a,r6a,r7a,r8a,r9a,r10a,r11a,r12a,r13a,r14a,r15a)=alu(op,cpsr,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15);
	(cpsrb,r0b,r1b,r2b,r3b,r4b,r5b,r6b,r7b,r8b,r9b,r10b,r11b,r12b,r13b,r14b,r15b)=multiplication(op,cpsra,r0a,r1a,r2a,r3a,r4a,r5a,r6a,r7a,r8a,r9a,r10a,r11a,r12a,r13a,r14a,r15a);
	(      r0c,r1c,r2c,r3c,r4c,r5c,r6c,r7c,r8c,r9c,r10c,r11c,r12c,r13c,r14c,r15c)=memoire(op,cpsrb,r0b,r1b,r2b,r3b,r4b,r5b,r6b,r7b,r8b,r9b,r10b,r11b,r12b,r13b,r14b,r15b); 
	(r14d,r15d)=branche(op,cpsrb,r14c,r15c);
	r15e=Mux<n>(eq<n>(r15d,r15),r15d,suiv);
(*	(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)=Etable4<1>(0.0.0.0,0,r0[0],r1[0],r2[0],r3[0],r4[0],r5[0],r6[0],r7[0],r8[0],r9[0],r10[0],r11[0],r12[0],r13[0],r14[0],r15[0]); *)

(*	cpsrb=cpsr;
	r0c=r0;
	r1c=r1;
	r2c=r2;
	r3c=r3;
	r4c=r4;
	r5c=r5;
	r6c=r6;
	r7c=r7;
	r8c=r8;
	r9c=r9;
	r10c=r10;
	r11c=r11;
	r12c=r12;
	r13c=r13;
	r14c=r14;
	r14d=r14;
	r15e=r15;*)
end where
